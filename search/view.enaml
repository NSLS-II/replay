"""Enaml definitions for the search views"""

import six

from enaml.widgets.api import (Container, RadioButton, PushButton, Window,
                               ScrollArea, Form, Label, GroupBox, SpinBox,
                               Html, Field, Timer)
from enaml.core.api import (Looper, Conditional, Include)
from enaml.stdlib.fields import IntField
from enaml.layout.api import (vbox, hbox, spacer, Box, factory, align)
from ..core import TimerButton, generate_grid
import logging

logger = logging.getLogger(__name__)


enamldef DisplaySummary(Container):
    """Enaml definition for the widget that displays a dictionary as a form
    """
    attr display_dict
    Form:
        padding = Box(0, 0, 0, 0)
        row_spacing = 0
        Looper:
            iterable << sorted(display_dict)
            Label:
                text = loop_item
            Field:
                text = str(display_dict[loop_item])
                read_only = True


enamldef WatchForHeadersView(Container):
    """Enaml definition for the widget that displays the controls for
    how frequently databroker will be asked for its most recent header
    """
    attr watch_headers_model

    Container:
        padding = Box(0, 0, 0, 0)
        constraints = [vbox(hbox(refresh_button, update_input),
                            search_info)]
        Timer: the_timer:
            interval << watch_headers_model.update_rate
            single_shot = False
            timeout ::
                watch_headers_model.check_header()
        TimerButton: refresh_button:
            checked := watch_headers_model.auto_update
            timer = the_timer
            text = "Automatically update data"
            tool_tip = ("If checked, poll the databroker for new runs at the"
                       "rate specified in the box to the right")
        SpinBox: update_input:
            minimum = 1000
            maximum = 3600000
            #special_value_text = 'Autotune'
            value := watch_headers_model.update_rate
            suffix = ' ms'
            single_step << value / 100
        Label: search_info:
            text << watch_headers_model.search_info


enamldef HeaderView(Container):
    """

    Enaml definition for the widget that displays a list of headers as radio
    buttons

    Attributes
    ----------
    search_model : dataportal.replay.search.model._BrokerSearch
    """
    attr search_model
    Looper:
        iterable << search_model.headers
        RadioButton:
            text = '{}: {}'.format(
                loop_item.scan_id, loop_item.start_datetime)
            clicked ::
                search_model.header = loop_item
    Label:
        text << search_model.search_info



enamldef GetLastView(Container):
    """

    Enaml definition for the widget that allows the user to search the
    dataportal for the last N runs

    Attributes
    ----------
    get_last_model : dataportal.replay.search.model.GetLastModel
    """
    attr get_last_model
    Container:
        padding = Box(0, 0, 0, 0)
        constraints = [vbox(num_runs, search_info, headers)]
        # GUI element that selects the number of run headers to display
        SpinBox: num_runs:
            prefix = "Display "
            suffix = " run(s)"
            minimum = 1
            value := get_last_model.num_to_retrieve
        # GUI element that provides search stats
        Label: search_info:
            text << get_last_model.search_info
        # GUI element that allows for different runs to be selected
        HeaderView: headers:
            search_model = get_last_model


enamldef ScanIDSearchView(Container):
    """

    Enaml definition for the widget that displays the controls for
    searching the dataportal for the last N runs

    Attributes
    ----------
    scan_id_model : dataportal.replay.search.model.ScanIDSearchModel
    """
    attr scan_id_model
    padding = Box(0, 0, 0, 0)
    constraints = [vbox(scan_id_container, search_info, headers)]

    # GUI element that selects the number of run headers to display
    Container: scan_id_container:
        padding = Box(0, 0, 0, 0)
        constraints = [hbox(scan_id_label, scan_id),
                       align('v_center', scan_id_label, scan_id)]
        Label: scan_id_label:
            text = "Scan id"
        SpinBox: scan_id:
            minimum = 1
            maximum = 100000000
            value := scan_id_model.scan_id
    # GUI element that provides search stats
    Label: search_info:
        text << scan_id_model.search_info
    # GUI element that allows for different runs to be selected
    HeaderView: headers:
        search_model = scan_id_model


enamldef DisplayHeaderView(Container):
    attr display_header_model
    # GUI Element to show a RunHeader
    DisplaySummary:
        padding = Box(0, 0, 0, 0)
        display_dict << display_header_model.header_as_dict

enamldef DisplayPVView(Container):
    attr display_header_model
    Container:
        padding = Box(0, 0, 0, 0)
        # GUI element to show a grid of PV information
        constraints << [factory(generate_grid, 3)]
        Include:
            objects << gen_objects(display_header_model.header_keys)

def gen_objects(keys):
    try:
        headers = keys[0]
    except IndexError:
        return []
    objs = [Label(text=headers[0]), Label(text=headers[1]),
            Label(text=headers[2])]
    for key in keys[1:]:
        objs.append(Label(text = key[0]))
        objs.append(Label(text = key[1]))
        objs.append(Field(text=key[2], read_only=True))
    return objs

enamldef GetLastWindow(Window): window:
    title = "Get Last"
    attr get_last_model
    GetLastView:
        get_last_model = window.get_last_model
