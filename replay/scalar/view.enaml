
""" The Enaml UI code for the scalar viewer

"""

from enaml.core.api import Looper
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.layout.api import vbox, hbox, spacer, grid, HSplitLayout, Box, spacer
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, ScrollArea, PushButton, RadioButton,
                               Field,
                               )
from enaml.stdlib.fields import FloatField
from .model import ScalarCollection, ScalarConfig
import random
import six
import logging

logger = logging.getLogger(__name__)

enamldef ButtonSet(GroupBox):
    attr model_name
    title = model_name
    padding = Box(0, 0, 0, 0)
    flat = True
    title_align = 'center'
    Form:
        row_spacing = 0
        column_spacing = 0
        Looper: looper2:
            iterable << sorted([model for model in scalar_collection.scalar_models.keys() if model_name in model], key=lambda x: x.lower())
            PushButton:
                text = loop_item
                checkable = True
                checked := scalar_collection.scalar_models[loop_item].is_plotting
                clicked ::
                    models = scalar_collection.scalar_models
                    scalar_collection.y = [name for name, model in models.items() if model.is_plotting]
                    scalar_collection.get_new_data_and_plot()



enamldef PlotControls(Container):
    attr scalar_collection
    limit_width = 'string'
    padding = Box(0, 0, 0, 0)
    GroupBox: plot:
        title_align = 'center'
        title = 'Plot'
        padding = Box(0, 0, 0, 0)
        Form:
            row_spacing = 0
            Label:
                text = "X axis"
            ComboBox: x_axis:
                items << list(scalar_collection.scalar_models.keys())
                editable = True
                index << scalar_collection.x_index
                selected_item >> scalar_collection.x
                enabled << not scalar_collection.x_is_index
            Label:
                text = "X axis options"
            Form:
                row_spacing = 0
                CheckBox: btn_time:
                    text = 'Plot against index'
                    checked := scalar_collection.x_is_index
                    clicked ::
                        scalar_collection.get_new_data_and_plot()
        GroupBox: persistence:
            padding = Box(0, 0, 0, 0)
            title = "Plot configuration"
            RadioButton: old:
                text = "Load plot details from disk"
                checked := scalar_collection.use_disk_state
            RadioButton: new:
                text = "Keep plot details from previous headers"
                checked := scalar_collection.use_ram_state
        GroupBox: measured:
            padding = Box(0, 0, 0, 0)
            title = "Data"
            PushButton:
                text = "Turn All On"
                clicked ::
                    for model in scalar_collection.scalar_models.values():
                        model.is_plotting = True
                    scalar_collection.get_new_data_and_plot()
            PushButton:
                text = "Turn All Off"
                clicked ::
                    for model in scalar_collection.scalar_models.values():
                        model.is_plotting = False
                    scalar_collection.get_new_data_and_plot()
            Looper: looper1:
                iterable << sorted(scalar_collection.data_cols, key=lambda x: x.lower())
                ButtonSet:
                    model_name = loop_item


enamldef PlotView(Container):
    Container:
        constraints = [
            vbox(
                hbox(autolim, spacer),
                vbox(canvas),
            ),
        ]
        CheckBox: autolim:
            text = "Autoscale limits"
            checked := scalar_collection.autolim_axes
        MPLCanvas: canvas:
            figure << scalar_collection._fig
            toolbar_visible = True


enamldef ScalarContainer(Window): window:
    attr scalar_collection
    Container:
        DockArea: da:
            layout = HSplitLayout('controls', 'view')
            DockItem:
                name = 'view'
                title = 'Scalar Plot View'
                Container:
                    PlotView: contains:
                        pass
            DockItem:
                name = 'controls'
                title = 'Scalar Plot Controls'
                Container:
                    PlotControls: controls:
                        pass
