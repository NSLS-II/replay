"""Enaml definitions for GUI views related to the DataMuxer"""

from enaml.layout.api import (vbox, hbox, Box, spacer, align, factory)
from enaml.widgets.api import (Container, PushButton, Label, GroupBox, Form,
                               Action, Menu, ComboBox, Timer, SpinBox, CheckBox)
from enaml.core.api import Looper, Include
from .model import ColumnModel
from ..core import TimerButton, generate_grid
import logging

logger = logging.getLogger(__name__)

enamldef NormalizeCheckBox(CheckBox):
    attr column_model
    checked := column_model.is_being_normalized
    enabled << column_model.can_be_normalized
    clicked ::
        muxer_model.normalize(column_model.name, checked)


enamldef DownsampleComboBox(ComboBox):
    attr column_model
    items << list(ColumnModel.downsample.items)
    index << ColumnModel.downsample.items.index(column_model.downsample)
    selected_item >> column_model.downsample


enamldef UpsampleComboBox(ComboBox):
    attr column_model
    items << list(ColumnModel.upsample.items)
    index << ColumnModel.upsample.items.index(column_model.upsample)
    selected_item >> column_model.upsample


enamldef ColumnModelGrid(Container):
    """Special snowflake Container object that takes a list of ColumnModel
    objects and displays them in a Form
    """
    attr column_model_list = []
    padding = Box(0, 0, 0, 0)
    constraints << [factory(generate_grid, 4)]
    Include:
        objects << gen_objects(column_model_list)


enamldef MuxerController(Container):
    padding = Box(0, 0, 0, 0)
    attr muxer_model
    constraints = [vbox(refresh_button, update_rate, operations, muxer_info,
                        scalar, line, image, volume),]
    Timer: the_timer:
        interval << muxer_model.update_rate
        single_shot = False
        timeout ::
            muxer_model.get_new_data()
    TimerButton: refresh_button:
        checked := muxer_model.auto_updating
        timer = the_timer
        text = "Automatically update data"
    Container: update_rate:
        constraints = [hbox(update_label, update_input),
                       align('v_center', update_label, update_input)]
        Label: update_label:
            text = "Update Rate"
        SpinBox: update_input:
            minimum = 2000
            maximum = 3600000
            #special_value_text = 'Autotune'
            value := muxer_model.update_rate
            suffix = ' ms'
            single_step << value / 100

    Label: muxer_info:
        text << muxer_model.info
    GroupBox: operations:
        title = "Data Operations"
        padding = Box(0, 0, 0, 0)
        Form:
            PushButton:
                text = "Perform Binning"
                clicked ::
                    muxer_model.perform_binning()
                    logger.debug('rebin clicked')
            ComboBox:
                items << muxer_model.binning_options
                selected_item >> muxer_model.binning_column
                index << muxer_model.binning_index
            Label:
                text = "Normalize data by"
                align = 'right'
            ComboBox:
                enabled = False
                items << muxer_model.norm_options
                selected_item >> muxer_model.norm_column
                index << muxer_model.norm_index
    GroupBox: scalar:
        title = 'Scalar PVs'
        padding = Box(0, 0, 0, 0)
        visible << muxer_model.scalar_columns_visible
        ColumnModelGrid: scalars:
            column_model_list << muxer_model.scalar_columns
    GroupBox: line:
        title = 'Line PVs'
        padding = Box(0, 0, 0, 0)
        visible << muxer_model.line_columns_visible
        ColumnModelGrid: lines:
            column_model_list << muxer_model.line_columns
    GroupBox: image:
        title = 'Image PVs'
        padding = Box(0, 0, 0, 0)
        visible << muxer_model.image_columns_visible
        ColumnModelGrid: images:
            column_model_list << muxer_model.image_columns
    GroupBox: volume:
        title = 'Volume PVs'
        padding = Box(0, 0, 0, 0)
        visible << muxer_model.volume_columns_visible
        ColumnModelGrid: volumes:
            column_model_list << muxer_model.volume_columns


def gen_objects(column_models):
    objs = [Label(text='PV alias'), Label(text='Upsample'),
            Label(text='Downsample'), Label(text='Normalize?')]
    for col in sorted(column_models, key=lambda model: model.name):
        objs.append(Label(text=col.name))
        objs.append(UpsampleComboBox(column_model=col))
        objs.append(DownsampleComboBox(column_model=col))
        objs.append(NormalizeCheckBox(column_model=col))

    return objs
