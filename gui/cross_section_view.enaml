
""" The Enaml UI code for the Cross Section Viewer and its control panel

<< autodoc-me >>
"""
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.core.api import Looper
from enaml.layout.api import vbox, hbox, spacer, HSplitLayout
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, PushButton
                               )
from enaml.stdlib.fields import FloatField
from replay.model.cross_section_model import CrossSectionModel
# valid options for matplotlib imshow interpolation
interpolation = ['none', 'nearest', 'bilinear', 'bicubic','spline16',
                 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser',
                 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',
                 'sinc', 'lanczos']
# this will be useable instead if PR #3682 gets merged into master
# from matplotlib.axes.imshow import interpolation

# create the colormap list
from matplotlib.cm import datad
cmap = datad.keys()
cmap.sort()


# create the intensity limits list
limit_options = ['full range', 'percentile', 'absolute']


enamldef SliderWithSpinner(Container): sws:
    attr cs_model
    Form:
        Label: lbl:
            text = "Frame number"
        SpinBox: sbox:
            value := cs_model.image_index
            minimum := cs_model.minimum
            maximum := cs_model.num_images
        CheckBox:
            text = "Auto-update"
            checked := cs_model.auto_update
        Slider: slider:
            value := cs_model.image_index
            minimum := cs_model.minimum
            maximum := cs_model.num_images
        FloatField:
            value := cs_model.redraw_every
            minimum = 0.0
        ComboBox:
            items << list(CrossSectionModel.redraw_type.items)
            selected_item >> cs_model.redraw_type




enamldef CrossSectionController(DockItem): csdock:
    attr cs_model
    visible << cs_model.visible
    Container:
        Form: f:
            padding = 0
            Label:
                text = "Color map"
            ComboBox: cmb_cmap:
                items = cmap
                editable = True
                index ::
                    cs_model.cmap = cmap[index]
            Label:
                text = "Interpolation"
            ComboBox:
                items = interpolation
                index ::
                    cs_model.interpolation = interpolation[index]
        GroupBox:
            title = "Image intensity"
            Form:
                padding = 0
                Label:
                    text = "Limit Strategy"
                ComboBox:
                    items = limit_options
                    index ::
                        cs_model.limit_func = limit_options[index]
                Label:
                    text = "I min"
                FloatField: imin:
                    minimum << cs_model.img_min
                    maximum << cs_model.img_max
                    value := cs_model.disp_min
                Label:
                    text = "I max"
                FloatField: imax:
                    minimum << cs_model.img_min
                    maximum << cs_model.img_max
                    value := cs_model.disp_max

        SliderWithSpinner: sws:
            cs_model = csdock.cs_model


enamldef CrossSectionView(DockItem):
    attr cs_model
    visible << cs_model.visible
    Container:
        CheckBox: check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure = cs_model.figure

enamldef CrossSectionCollection(DockItem):
    attr cross_section_collection
    Container:
        Form:
            Looper: looper:
                iterable << cross_section_collection.cs_model_names
                PushButton:
                    text = loop_item
                    checked := (cross_section_collection.
                                cross_section_models[loop_item].visible)



enamldef CrossSectionMain(MainWindow): mw:
    title = "Cross Section Main Window"
    attr cs_model
    Container:
        DockArea:
            layout = HSplitLayout('controller', 'view')
            CrossSectionController:
                name = 'controller'
                cs_model = mw.cs_model
            CrossSectionView:
                name = 'view'
                cs_model = mw.cs_model

