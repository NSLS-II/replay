
""" The Enaml UI code for the Cross Section Viewer and its control panel

<< autodoc-me >>
"""
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.core.api import Looper
from enaml.layout.api import vbox, hbox, spacer, HSplitLayout
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, PushButton
                               )
from enaml.stdlib.fields import FloatField
from replay.model.cross_section_model import CrossSectionModel
# valid options for matplotlib imshow interpolation
# this will be useable instead if PR #3682 gets merged into master
# from matplotlib.axes.imshow import interpolation



# create the intensity limits list
limit_options = ['full range', 'percentile', 'absolute']

cmap = list(CrossSectionModel.cmap.items)
cmap.sort()

interpolation = list(CrossSectionModel.interpolation.items)

enamldef SliderWithSpinner(Container): sws:
    Form:
        row_spacing = 0
        Label: lbl:
            text = "Frame number"
        SpinBox: sbox:
            value := cs_model.image_index
            minimum := cs_model.minimum
            maximum := cs_model.num_images
        CheckBox:
            text = "Auto-update"
            checked := cs_model.auto_update
        Slider: slider:
            value := cs_model.image_index
            minimum := cs_model.minimum
            maximum := cs_model.num_images
            tick_interval << int(value / 10)
        Label:
            text = 'update rate'
        FloatField:
            value := cs_model.redraw_every
            minimum = 0.0
            fix_invalid_input = True
        Label:
            text = 'update unit'
        ComboBox:
            items << list(CrossSectionModel.redraw_type.items)
            selected_item >> cs_model.redraw_type
            index << CrossSectionModel.redraw_type.items.index(
                cs_model.redraw_type)
        Label:
            text = 'update rate'
        Label:
            text := cs_model.update_rate




enamldef CrossSectionController(DockItem): csdock:
    visible << cs_model.visible
    Container:
        Form: f:
            row_spacing = 0
            padding = 0
            Label:
                text = "Image PV"
            ComboBox: cmb_imgpv:
                items << cs_model.dm_names
                index = cs_model.dm_names.index(cs_model.name)
                selected_item >> cs_model.name
            Label:
                text = "Color map"
            ComboBox: cmb_cmap:
                items = cmap
                editable = True
                index = cmap.index(cs_model.cmap)
                selected_item >> cs_model.cmap
            Label:
                text = "Interpolation"
            ComboBox:
                items = interpolation
                editable = True
                index = interpolation.index(cs_model.interpolation)
                selected_item >> cs_model.interpolation
        GroupBox:
            title = "Image intensity"
            Form:
                row_spacing = 0
                padding = 0
                Label:
                    text = "Limit Strategy"
                ComboBox:
                    items = list(CrossSectionModel.limit_func_type.items)
                    index = list(
                        CrossSectionModel.limit_func_type.items).index(
                            cs_model.limit_func_type)
                    selected_item >> cs_model.limit_func_type
                Label:
                    text = "I min"
                FloatField: imin:
                    minimum << cs_model.img_min
                    maximum << cs_model.img_max
                    value := cs_model.disp_min
                    enabled << cs_model.min_enabled
                    fix_invalid_input = True
                Label:
                    text = "I max"
                FloatField: imax:
                    minimum << cs_model.img_min
                    maximum << cs_model.img_max
                    value := cs_model.disp_max
                    enabled << cs_model.max_enabled
                    fix_invalid_input = True

        SliderWithSpinner: sws:
            pass


enamldef CrossSectionView(DockItem):
    visible << cs_model.visible
    Container:
        constraints = [
            vbox(
                hbox(toolbar_visible, autoscale_h, autoscale_v, spacer),
                canvas,
            ),
        ]
        CheckBox: toolbar_visible:
            text = 'Toolbar Visible'
            enabled = False
            checked := canvas.toolbar_visible
        CheckBox: autoscale_h:
            text = 'Autoscale Horizontal'
            checked := cs_model.autoscale_horizontal
        CheckBox: autoscale_v:
            text = 'Autoscale Vertical'
            checked := cs_model.autoscale_vertical
        MPLCanvas: canvas:
            figure << cs_model._fig
            toolbar_visible = True


enamldef CrossSectionCollection(DockItem):
    attr cross_section_collection
    Container:
        Form:
            Looper: looper:
                iterable << cross_section_collection.cs_model_names
                PushButton:
                    text = loop_item
                    checked := (cross_section_collection.
                                cross_section_models[loop_item].visible)



enamldef CrossSectionMain(MainWindow): mw:
    title = "Cross Section Main Window"
    attr cs_model
    Container:
        DockArea:
            layout = HSplitLayout('controller', 'view')
            CrossSectionController:
                name = 'controller'
            CrossSectionView:
                name = 'view'

