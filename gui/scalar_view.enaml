
""" The Enaml UI code for the scalar viewer

"""

from enaml.core.api import Looper
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.layout.api import vbox, hbox, spacer, grid, HSplitLayout, Box, spacer
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, ScrollArea, PushButton, RadioButton,
                               Field,
                               )
from enaml.stdlib.fields import FloatField
from replay.model.scalar_model import ScalarCollection, ScalarConfig
import random
import six

enamldef ScalarController(Container):
    ScrollArea: scroller:
        Container:
            Form:
                row_spacing = 0
                Label:
                    text = 'update frequency'
                FloatField: rate:
                    value := scalar_collection.redraw_every
                    minimum = 0.0
                    #fix_invalid_input = True
                Label:
                    text = 'update unit'
                ComboBox:
                    items << list(ScalarCollection.redraw_type.items)
                    selected_item >> scalar_collection.redraw_type
                    index << ScalarCollection.redraw_type.items.index(
                        scalar_collection.redraw_type
                    )
                Label:
                    text = 'update rate'
                Label:
                    text := scalar_collection.update_rate

            GroupBox: plot:
                title_align = 'center'
                title = 'Plot'
                padding = Box(0, 0, 0, 0)
                Form:
                    Label:
                        text = "Column to align against"
                    ComboBox: xcmb:
                        items << list(scalar_collection.col_names)
                        editable = True
                        index = 0
                        selected_item >> scalar_collection.alignment_col
                        enabled = False
                    Label:
                        text = "X axis"
                    ComboBox: x_axis:
                        items << list(scalar_collection.col_names)
                        editable = True
                        index = 0
                        selected_item >> scalar_collection.x
                    Label:
                        text = "X axis options"
                    Container:
                        constraints = [hbox(btn_val, btn_time, spacer)]
                        RadioButton: btn_val:
                            text = "data"
                            checked := scalar_collection.x_is_data
                        RadioButton: btn_time:
                            text = "time"
                            checked := scalar_collection.x_is_time
                    Label:
                        text = "Dataset to fit"
                    ComboBox: cmb_fit:
                        items << list(scalar_collection.col_names)
                        editable = True
                        index = 0
                        enabled = False
                        #selected_item >> scalar_collection.fit_target
                    Label:
                        text = "Dataset to estimate"
                    ComboBox: cmb_est:
                        items << list(scalar_collection.col_names)
                        index << scalar_collection.estimate_index
                        enabled = True
                        selected_item >> scalar_collection.estimate_target
                    Label:
                        text = "Dataset to normalize by"
                    Form:
                        CheckBox:
                            checked := scalar_collection.normalize
                        ComboBox: cmb_est:
                            items << list(scalar_collection.col_names)
                            index << 0
                            enabled = True
                            selected_item >> scalar_collection.normalize_target
                    Label:
                        text = "Y axis"
                    Label:
                        pass
                    row_spacing = 0
                    Looper: looper:
                        iterable << scalar_collection.col_names
                        PushButton: cb_plot:
                            text = loop_item
                            enabled := (
                                scalar_collection.
                                    scalar_models[loop_item].can_plot
                            )
                            checked := (
                                scalar_collection.
                                    scalar_models[loop_item].is_plotting
                            )
                            checkable := (
                                scalar_collection.
                                    scalar_models[loop_item].can_plot
                            )
                            clicked ::
                                if (loop_item != 'peak stats' and
                                    loop_item != 'fit'):
                                    scalar_collection.estimate_target = loop_item
                        Label:
                            text << str(id(scalar_collection.scalar_models[loop_item]))
            GroupBox: estimate:
                title_align = 'center'
                title = 'Estimate'
                padding = Box(0, 0, 0, 0)
                Form:
                    row_spacing = 0
                    Looper: looper:
                        iterable << list(six.iterkeys(scalar_collection.estimate_stats))
                        Label:
                            text = '{}: {}'.format(loop_item,
                                scalar_collection.estimate_stats[loop_item])
                        PushButton:
                            text = 'Plot'
                            checkable = True
                            checked = loop_item in scalar_collection.estimate_plot
                            clicked ::
                                if checked:
                                    scalar_collection.estimate_plot.append(loop_item)
                                else:
                                    try:
                                        scalar_collection.estimate_plot.remove(loop_item)
                                    except ValueError:
                                        # loop_item is not in the list
                                        pass
                                scalar_collection.reformat_view()


enamldef ScalarView(Container):
    #alias fitter
    Container:
        constraints = [
            vbox(
                hbox(check, spacer, fit),
                #vbox(canvas, fitter),
                vbox(canvas),
            ),
        ]
        CheckBox: check:
            text = 'Toolbar Visible'
            enabled = False
            checked := canvas.toolbar_visible
        CheckBox: fit:
            text = 'Fitting Visible'
            #checked := fitter.show_fit
        MPLCanvas: canvas:
            figure << scalar_collection._fig
            toolbar_visible = True
#        MultiFitController: fitter:
#            pass


enamldef ScalarContainer(Window): window:
    attr scalar_collection
    Container:
        DockArea: da:
            layout = HSplitLayout('controls', 'views')
            DockItem:
                name = 'views'
                title = 'Scalar View'
                Container:
                    ScalarView: contains:
                        pass
            DockItem:
                name = 'controls'
                title = 'Scalar Controller'
                Container:
                    ScalarController: controls:
                        pass