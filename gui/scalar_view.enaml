
""" The Enaml UI code for the scalar viewer

"""

from enaml.core.api import Looper
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.layout.api import vbox, hbox, spacer, grid, HSplitLayout, Box
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, ScrollArea, PushButton, RadioButton,
                               )
from enaml.stdlib.fields import FloatField
from replay.model.scalar_model import ScalarCollection

#enamldef FitView(Container):

enamldef FitController(Container):
    attr show_fit: bool = True
    Container:
        visible := show_fit
        Form:
            Label:
                text = 'Fit model'
            ComboBox:
                items << fitting_model.model_names


enamldef ScalarController(Container):
    ScrollArea: scroller:
        Container:
            Form:
                row_spacing = 0
                Label: xlbl:
                    text = "x axis"
                ComboBox: xcmb:
                    items << list(scalar_collection.col_names)
                    editable = True
                    selected_item >> scalar_collection.x
                    # this scalar allows the plotter to come up with guns blazing
                    # (plotting)
                    index = 0
                Label:
                    text = 'update frequency'
                FloatField: rate:
                    value := scalar_collection.redraw_every
                    minimum = 0.0
                Label:
                    text = 'update unit'
                ComboBox:
                    items << list(ScalarCollection.redraw_type.items)
                    selected_item >> scalar_collection.redraw_type
                    index << ScalarCollection.redraw_type.items.index(
                        scalar_collection.redraw_type)
                Label:
                    text = 'update rate'
                Label:
                    text := scalar_collection.update_rate

            GroupBox: plot:
                title_align = 'center'
                title = 'Plot'
                padding = Box(0, 0, 0, 0)
                Form:
                    Label:
                        text = "Y axis"
                    Label:
                        text = "Fit"
                    row_spacing = 0
                    Looper: looper:
                        iterable << list(scalar_collection.col_names)
                        PushButton: cb_plot:
                            text = loop_item
                            checked := (
                                scalar_collection.
                                    scalar_models[loop_item].is_plotting
                            )
                            checkable := (
                                scalar_collection.
                                    scalar_models[loop_item].can_plot
                            )
                        RadioButton: cb_fit:
                            text = loop_item
                            checked ::
                               print('cb_fit clicked for {}'.format(text))
            GroupBox: fit:
                title_align = 'center'
                title = 'Fit'
                padding = Box(0, 0, 0, 0)

enamldef ScalarView(Container):
    Container:
        constraints = [
            vbox(
                hbox(check, spacer, fit),
                vbox(canvas, fitter),
            ),
        ]
        CheckBox: check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        CheckBox: fit:
            text = 'Fitting Visible'
            checked := fitter.show_fit
        MPLCanvas: canvas:
            figure << scalar_collection._fig
        FitController: fitter:
            pass


enamldef ScalarContainer(Window): window:
    attr scalar_collection
    Container:
        DockArea: da:
            layout = HSplitLayout('controls', 'views')
            DockItem:
                name = 'views'
                title = 'Scalar View'
                Container:
                    ScalarView: contains:
                        pass
            DockItem:
                name = 'controls'
                title = 'Scalar Controller'
                Container:
                    ScalarController: controls:
                        pass